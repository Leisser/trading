name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        scope: write:packages
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker images with docker-compose
      run: |
        # Build all services using docker-compose
        docker compose build --parallel
        
        # Convert repository name to lowercase for container registry
        REPO_NAME=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
        
        # List all images to see the actual names
        echo "Available Docker images:"
        docker images
        
        # Get the actual image names from docker-compose
        WEB_IMAGE=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep web | head -1 | awk '{print $1}')
        FRONTEND_IMAGE=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep frontend | head -1 | awk '{print $1}')
        DASHBOARD_IMAGE=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep dashboard | head -1 | awk '{print $1}')
        
        echo "Web image: $WEB_IMAGE"
        echo "Frontend image: $FRONTEND_IMAGE"
        echo "Dashboard image: $DASHBOARD_IMAGE"
        
        # Try to push to a simpler repository name first
        SIMPLE_REPO_NAME="trading"
        
        # Tag and push web service (required)
        if [ -n "$WEB_IMAGE" ]; then
          echo "Tagging web service: $WEB_IMAGE"
          docker tag $WEB_IMAGE ${{ env.REGISTRY }}/${SIMPLE_REPO_NAME}-web:latest
          echo "Attempting to push web service..."
          if docker push ${{ env.REGISTRY }}/${SIMPLE_REPO_NAME}-web:latest; then
            echo "Web service pushed successfully"
          else
            echo "Failed to push web service, trying with full repository name..."
            docker tag $WEB_IMAGE ${{ env.REGISTRY }}/${REPO_NAME}-web:latest
            docker push ${{ env.REGISTRY }}/${REPO_NAME}-web:latest
            echo "Web service pushed with full name"
          fi
        else
          echo "ERROR: Web service image not found!"
          exit 1
        fi
        
        # Tag and push frontend service (optional)
        if [ -n "$FRONTEND_IMAGE" ]; then
          echo "Tagging frontend service: $FRONTEND_IMAGE"
          docker tag $FRONTEND_IMAGE ${{ env.REGISTRY }}/${SIMPLE_REPO_NAME}-frontend:latest
          if docker push ${{ env.REGISTRY }}/${SIMPLE_REPO_NAME}-frontend:latest; then
            echo "Frontend service pushed successfully"
          else
            echo "Failed to push frontend service, trying with full repository name..."
            docker tag $FRONTEND_IMAGE ${{ env.REGISTRY }}/${REPO_NAME}-frontend:latest
            docker push ${{ env.REGISTRY }}/${REPO_NAME}-frontend:latest
            echo "Frontend service pushed with full name"
          fi
        else
          echo "WARNING: Frontend service image not found, skipping..."
        fi
        
        # Tag and push dashboard service (optional)
        if [ -n "$DASHBOARD_IMAGE" ]; then
          echo "Tagging dashboard service: $DASHBOARD_IMAGE"
          docker tag $DASHBOARD_IMAGE ${{ env.REGISTRY }}/${SIMPLE_REPO_NAME}-dashboard:latest
          if docker push ${{ env.REGISTRY }}/${SIMPLE_REPO_NAME}-dashboard:latest; then
            echo "Dashboard service pushed successfully"
          else
            echo "Failed to push dashboard service, trying with full repository name..."
            docker tag $DASHBOARD_IMAGE ${{ env.REGISTRY }}/${REPO_NAME}-dashboard:latest
            docker push ${{ env.REGISTRY }}/${REPO_NAME}-dashboard:latest
            echo "Dashboard service pushed with full name"
          fi
        else
          echo "WARNING: Dashboard service image not found, skipping..."
        fi
    
    - name: Check server configuration
      run: |
        if [ -z "${{ secrets.SERVER_HOST }}" ]; then
          echo "WARNING: SERVER_HOST secret not configured. Skipping deployment."
          echo "To enable deployment, configure the following secrets in your repository:"
          echo "- SERVER_HOST: Your server IP address"
          echo "- SERVER_USER: SSH username"
          echo "- SERVER_SSH_KEY: SSH private key"
          exit 0
        fi
        echo "Server configuration found. Proceeding with deployment..."

    - name: Deploy to server
      if: secrets.SERVER_HOST != ''
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          # Update code
          cd /opt/fluxor
          git pull origin main
          
          # Stop existing containers
          docker-compose down
          
          # Pull latest images
          docker-compose pull
          
          # Start services
          docker-compose up -d
          
          # Run migrations
          docker-compose exec -T web python manage.py migrate
          
          # Collect static files
          docker-compose exec -T web python manage.py collectstatic --noinput
          
          # Restart services
          docker-compose restart
          
          # Health check
          sleep 30
          curl -f http://localhost:8000/api/health/ || exit 1
          curl -f http://localhost:5173/ || exit 1
          curl -f http://localhost:3001/ || exit 1
          
          echo "Deployment successful!"

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
