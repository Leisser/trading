version: '3.8'

services:
  # Database
  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-fluxor_prod}
      POSTGRES_USER: ${POSTGRES_USER:-fluxor}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - trading_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fluxor}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - trading_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django API
  api:
    build:
      context: ./fluxor_api
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://${POSTGRES_USER:-fluxor}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-fluxor_prod}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:5173,http://localhost:3001}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - trading_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery_worker:
    build:
      context: ./fluxor_api
      dockerfile: Dockerfile
    restart: unless-stopped
    command: celery -A fluxor_api worker -l info
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://${POSTGRES_USER:-fluxor}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-fluxor_prod}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - db
      - redis
    networks:
      - trading_network

  # Celery Beat
  celery_beat:
    build:
      context: ./fluxor_api
      dockerfile: Dockerfile
    restart: unless-stopped
    command: celery -A fluxor_api beat -l info
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://${POSTGRES_USER:-fluxor}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-fluxor_prod}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - db
      - redis
    networks:
      - trading_network

  # Trading Tasks
  trading_tasks:
    build:
      context: ./fluxor_api
      dockerfile: Dockerfile
    restart: unless-stopped
    command: python manage.py runserver 0.0.0.0:8001
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://${POSTGRES_USER:-fluxor}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-fluxor_prod}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - db
      - redis
    networks:
      - trading_network

  # Next.js Web Application
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=production
      - PORT=5173
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000/api}
    depends_on:
      - api
    networks:
      - trading_network

  # Dashboard
  dashboard:
    build:
      context: ./fluxor-dashboard
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3001:80"
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8000/api}
    depends_on:
      - web
    networks:
      - trading_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-https.conf:/etc/nginx/nginx.conf
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    depends_on:
      - api
      - web
      - dashboard
    networks:
      - trading_network

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  trading_network:
    driver: bridge